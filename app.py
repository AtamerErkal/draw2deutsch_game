import streamlit as st
from streamlit_drawable_canvas import st_canvas
import numpy as np
import cv2
import random
import time
import tensorflow as tf
import os

# --- Uygulama AyarlarÄ± ve Sabitler ---
st.set_page_config(page_title="Pixi ile Ã‡iz ve Ã–ÄŸren", page_icon="ðŸ¤–")

# Kelime Veri TabanÄ± (WORD_DATA listesi Ã¶nceki cevaptaki gibi kalacak)
WORD_DATA = [
    {'de': 'Apfel', 'en': 'apple', 'hint1': 'KÄ±rmÄ±zÄ± veya yeÅŸil renkli bir meyvedir.', 'hint2': 'Elma'},
    {'de': 'Auto', 'en': 'car', 'hint1': 'DÃ¶rt tekerleÄŸi vardÄ±r ve yolda gider.', 'hint2': 'Araba'},
    {'de': 'Banane', 'en': 'banana', 'hint1': 'SarÄ± renkli, uzun bir meyvedir.', 'hint2': 'Muz'},
    {'de': 'Baum', 'en': 'tree', 'hint1': 'YapraklarÄ± ve dallarÄ± olan bÃ¼yÃ¼k bir bitkidir.', 'hint2': 'AÄŸaÃ§'},
    {'de': 'Bett', 'en': 'bed', 'hint1': 'Ãœzerinde uyuduÄŸumuz bir mobilyadÄ±r.', 'hint2': 'Yatak'},
    {'de': 'Brille', 'en': 'eyeglasses', 'hint1': 'Daha iyi gÃ¶rmek iÃ§in gÃ¶zÃ¼mÃ¼ze takarÄ±z.', 'hint2': 'GÃ¶zlÃ¼k'},
    {'de': 'Buch', 'en': 'book', 'hint1': 'Ä°Ã§inde hikayeler ve bilgiler olan bir nesnedir.', 'hint2': 'Kitap'},
    {'de': 'Fisch', 'en': 'fish', 'hint1': 'Suda yaÅŸar ve yÃ¼zer.', 'hint2': 'BalÄ±k'},
    {'de': 'Haus', 'en': 'house', 'hint1': 'Ä°Ã§inde yaÅŸadÄ±ÄŸÄ±mÄ±z bir yapÄ±dÄ±r.', 'hint2': 'Ev'},
    {'de': 'Hut', 'en': 'hat', 'hint1': 'BaÅŸÄ±mÄ±za taktÄ±ÄŸÄ±mÄ±z bir aksesuardÄ±r.', 'hint2': 'Åžapka'},
    {'de': 'Katze', 'en': 'cat', 'hint1': 'Miyav diye ses Ã§Ä±karan bir evcil hayvandÄ±r.', 'hint2': 'Kedi'},
    {'de': 'Mond', 'en': 'moon', 'hint1': 'Geceleri gÃ¶kyÃ¼zÃ¼nde parlayan gÃ¶k cismidir.', 'hint2': 'Ay'},
    {'de': 'Sonne', 'en': 'sun', 'hint1': 'GÃ¼ndÃ¼zleri gÃ¶kyÃ¼zÃ¼nÃ¼ aydÄ±nlatan bÃ¼yÃ¼k sarÄ± yÄ±ldÄ±zdÄ±r.', 'hint2': 'GÃ¼neÅŸ'},
    {'de': 'Stuhl', 'en': 'chair', 'hint1': 'Ãœzerine oturmak iÃ§in kullanÄ±lÄ±r.', 'hint2': 'Sandalye'},
    {'de': 'Tisch', 'en': 'table', 'hint1': 'Ãœzerine yemek veya eÅŸya koyduÄŸumuz mobilyadÄ±r.', 'hint2': 'Masa'},
    # ... Ã–nceki cevaptaki 50 kelimenin tamamÄ±nÄ± buraya ekleyin ...
]

# --- Pixi'nin CÃ¼mleleri (DeÄŸiÅŸiklik yok) ---
PIXI_SUCCESS_PHRASES = [
    "YaÅŸasÄ±n! Buldum! Bu harika bir **{}**! Ã‡ok gÃ¼zel Ã§izdin!",
    "Ä°ÅŸte bu! Seninle harika bir takÄ±mÄ±z! MÃ¼kemmel bir **{}** Ã§izimi.",
    "Vay canÄ±na! Sen bir sanatÃ§Ä±sÄ±n! Tabii ki bu bir **{}**!",
    "HarikasÄ±n! Bu **{}** Ã§izimini hemen tanÄ±dÄ±m!"
]
PIXI_FAIL_PHRASES = [
    "Ah, bu biraz zordu galiba! DoÄŸru cevap **{}** olacaktÄ±. Bir sonrakinde baÅŸarÄ±rÄ±z!",
    "Neredeyse buluyordum! Ã‡izimin Ã§ok gÃ¼zeldi ama sÃ¼remiz bitti. Cevap: **{}**.",
    "Hmm, bunu tam Ã§Ä±karamadÄ±m. DoÄŸrusu **{}** imiÅŸ. ÃœzÃ¼lme, devam edelim!"
]
PIXI_GUESSING_PHRASES = [
    "Hmm, bu bir... **{}** mÄ±?",
    "Dur bir saniye, ÅŸekillenmeye baÅŸladÄ±! SanÄ±rÄ±m bir **{}**!",
    "Ã‡izgilerin bana bir ÅŸeyler anlatÄ±yor... Bu bir **{}** olabilir mi?"
]

# --- GERÃ‡EK MODEL YÃœKLEME VE Ä°ÅžLEME FONKSÄ°YONLARI ---

@st.cache_resource
def load_model_and_labels():
    """Modeli ve etiketleri yÃ¼kler, sadece bir kez Ã§alÄ±ÅŸÄ±r."""
    try:
        model = tf.keras.models.load_model('model/quickdraw_model.h5')
        with open('model/labels.txt', 'r') as f:
            labels = [line.strip() for line in f.readlines()]
        return model, labels
    except Exception as e:
        st.error(f"Model veya etiket dosyasÄ± yÃ¼klenemedi! 'model' klasÃ¶rÃ¼nÃ¼ kontrol edin. Hata: {e}")
        return None, None

def preprocess_image(image_data):
    """Canvas'tan gelen Ã§izimi modelin anlayacaÄŸÄ± formata dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r."""
    if image_data is not None:
        # RGBA'dan gri tonlamaya Ã§evir
        img = cv2.cvtColor(image_data.astype(np.uint8), cv2.COLOR_RGBA2GRAY)
        
        # Ã‡izimi (siyah) arka plandan (beyaz) ayÄ±rmak iÃ§in threshold uygula
        _, img = cv2.threshold(img, 25, 255, cv2.THRESH_BINARY)

        # GÃ¶rÃ¼ntÃ¼yÃ¼ yeniden boyutlandÄ±r
        img = cv2.resize(img, (28, 28))
        
        # Modelin giriÅŸi iÃ§in normalize et ve boyutu ayarla (1, 28, 28, 1)
        img = img.reshape(1, 28, 28, 1).astype('float32') / 255.0
        return img
    return None

# --- Oyun YÃ¶netim FonksiyonlarÄ± (DeÄŸiÅŸiklik yok) ---
def initialize_game():
    st.session_state.game_in_progress = True
    st.session_state.current_round = 1
    st.session_state.total_rounds = 5
    st.session_state.score = 0
    st.session_state.game_word_list = random.sample(WORD_DATA, st.session_state.total_rounds)
    start_new_round()

def start_new_round():
    st.session_state.round_active = True
    st.session_state.start_time = time.time()
    st.session_state.round_won = False
    st.session_state.hint_level = 0
    st.session_state.current_word_data = st.session_state.game_word_list[st.session_state.current_round - 1]

# --- ANA UYGULAMA ---

# Modeli ve etiketleri yÃ¼kle
model, labels = load_model_and_labels()

st.title("ðŸ¤– Pixi ile Ã‡iz ve Ã–ÄŸren!")

if 'game_in_progress' not in st.session_state:
    st.session_state.game_in_progress = False

if not st.session_state.game_in_progress:
    st.write("Merhaba! Ben Pixi, senin Ã§izim robotun. Almanca kelimeleri birlikte Ã§izip Ã¶ÄŸrenmeye ne dersin? Sana bir kelime vereceÄŸim, sen Ã§izeceksin ve ben ne olduÄŸunu tahmin etmeye Ã§alÄ±ÅŸacaÄŸÄ±m!")
    if st.button("Oyuna BaÅŸla!", type="primary", disabled=(model is None)):
        initialize_game()
        st.experimental_rerun()
    if model is None:
        st.error("Model yÃ¼klenemediÄŸi iÃ§in oyun baÅŸlatÄ±lamÄ±yor. LÃ¼tfen README.md dosyasÄ±ndaki kurulum adÄ±mlarÄ±nÄ± kontrol et.")
else:
    # Oyun bitiÅŸi
    if st.session_state.current_round > st.session_state.total_rounds:
        st.header("Oyun Bitti!")
        st.subheader(f"Skorun: {st.session_state.total_rounds} kelimeden {st.session_state.score} tanesini doÄŸru Ã§izdin!")
        st.balloons()
        if st.button("Tekrar Oyna"):
            initialize_game()
            st.experimental_rerun()
        st.stop()

    # Mevcut Tur
    word_data = st.session_state.current_word_data
    target_word_de = word_data['de']
    target_word_en = word_data['en']

    st.header(f"Tur: {st.session_state.current_round}/{st.session_state.total_rounds} - Haydi Ã§iz: **{target_word_de}**")
    
    col1, col2 = st.columns([3, 2])
    
    with col1:
        canvas_result = st_canvas(
            stroke_width=15, stroke_color="#FFFFFF", background_color="#000000",
            width=400, height=400, drawing_mode="freedraw",
            key=f"canvas_{st.session_state.current_round}",
            update_streamlit=st.session_state.round_active,
        )

    with col2:
        time_left_placeholder = st.empty()
        st.write("---")
        st.subheader("ðŸ¤– Pixi DÃ¼ÅŸÃ¼nÃ¼yor...")
        guess_placeholder = st.empty()
        guess_placeholder.info("Ã‡izmeye baÅŸla!")

        st.write("---")
        if st.button("Bu kelimeyi bilmiyorum"):
            if st.session_state.hint_level < 2:
                st.session_state.hint_level += 1
        
        if st.session_state.hint_level >= 1:
            st.warning(f"**1. Ä°pucu:** {word_data['hint1']}")
        if st.session_state.hint_level >= 2:
            st.success(f"**2. Ä°pucu:** TÃ¼rkÃ§esi **{word_data['hint2']}**")

    if st.session_state.round_active:
        elapsed_time = time.time() - st.session_state.start_time
        time_left = max(0, 20 - int(elapsed_time))
        time_left_placeholder.metric("Kalan SÃ¼re", f"{time_left} s")
        
        if canvas_result.image_data is not None and canvas_result.image_data.sum() > 0:
            processed_image = preprocess_image(canvas_result.image_data)
            
            # --- GERÃ‡EK MODEL TAHMÄ°NÄ° ---
            predictions = model.predict(processed_image)
            top_index = np.argmax(predictions[0])
            current_guess_en = labels[top_index]
            
            # Ä°ngilizce tahmini Almancaya geri Ã§evir
            current_guess_de_list = [d['de'] for d in WORD_DATA if d['en'] == current_guess_en]
            if current_guess_de_list:
                current_guess_de = current_guess_de_list[0]
                guess_placeholder.markdown(random.choice(PIXI_GUESSING_PHRASES).format(f"**{current_guess_de}**"))

                if current_guess_en == target_word_en:
                    st.session_state.round_won = True
                    st.session_state.round_active = False
            # --- TAHMÄ°N SONU ---

        if time_left <= 0:
            st.session_state.round_active = False

    if not st.session_state.round_active:
        time_left_placeholder.metric("Kalan SÃ¼re", "SÃ¼re Doldu!")
        if st.session_state.round_won:
            st.success(random.choice(PIXI_SUCCESS_PHRASES).format(target_word_de))
            st.session_state.score += 1
        else:
            st.error(random.choice(PIXI_FAIL_PHRASES).format(target_word_de))
        
        if st.button("Sonraki Kelime â†’"):
            st.session_state.current_round += 1
            if st.session_state.current_round <= st.session_state.total_rounds:
                start_new_round()
            st.experimental_rerun()